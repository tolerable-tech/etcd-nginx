#!/bin/bash

set -eo pipefail

export ETCD_PORT=${ETCD_PORT:-2379}
export HOST_IP=${HOST_IP:-172.17.8.101}
export ETCD=$HOST_IP:$ETCD_PORT

echo "[nginx] booting container. ETCD: $ETCD."

# Start the Nginx service using the generated config
if [[ -f /etc/nginx/conf.d/apps.conf ]]; then
  echo "[nginx] waiting to join fulcrum-private"
  sleep 2

  set +e
  COUNTER=10
  until [  $COUNTER -lt 1 ]; do
    nginx -t
    if [[ "$?" == "0" ]]; then
      SUCCESS=1
      COUNTER=0
    fi
    let COUNTER-=1
    sleep 2
  done
  set -e
fi

# If we never got nginx tests to pass, just delete them since we're about
# to generate the confs again.
if [[ ! "$SUCCESS" == "1" && -f /etc/nginx/conf.d/apps.conf ]]; then
  rm /etc/nginx/conf.d/apps.conf
fi

echo "[nginx] starting nginx service..."
service nginx start

# We don't want LE enabled while we're trying to generate our initial nginx config
# so we store the value here. This doesn't happen on setups, but it may happen
# on reboots
set +e
le_enabled_value=`curl http://$ETCD/v2/keys/le/enabled`
curlexit=$?
set -e
if [[ ! "$curlexit" == "0" ]]; then
  echo "[nginx] couldn't curl etcd, waiting a bit and trying again."
  sleep 20
  le_enabled_value=`curl http://$ETCD/v2/keys/le/enabled`
fi
if [[ "$le_enabled_value" == *true* ]]; then
  curl "http://$ETCD/v2/keys/le/enabled" -X PUT -d value="false"
fi

moveon=false

# We want to wait on the nginx conf before we enable the le conf.
# the old loop would fail if we enabled the le, and had no way of waiting on one.
until [[ "$moveon" == "fuck yeah" ]]; do
  set +e
  confd -onetime -node $ETCD -confdir /etc/confd
  set -e
  if [[ ! -f /etc/nginx/conf.d/apps.conf ]]; then
    echo "[nginx] waiting for confd to create initial nginx configuration."
    sleep 5
  else
    moveon="fuck yeah"
  fi
done
echo "[nginx exited loop and doing well]"

set +e
COUNTER=20
until [  $COUNTER -lt 10 ]; do
  nginx -t
  if [[ "$?" == "0" ]]; then
    COUNTER=0
  fi
  let COUNTER-=1
  sleep 2
done
set -e

nginx -s reload
curl "http://$ETCD/v2/keys/le/enabled" -X PUT -d value="true"

# Put a continual polling `confd` process into the background to watch
# for changes every 10 seconds
confd -interval 10 -node $ETCD -confdir /etc/confd &
echo "[nginx] confd is now monitoring etcd for changes..."

# Follow the logs to allow the script to continue running
tail -f /var/log/nginx/*.log

